# Development tests to check error handling in dev mode, most of the tests will fail
# as intended and they must not be included in CI.
name: Test sanity checks
description: Sanity checks for yaml files
skip: False
binary_path: ls
default_parameters:
  log_file: ${PWD}/sanity_checks.log
#
text_output: &AS_TEXT
  treat_as: text
bytes_output: &AS_BYTES
  treat_as: bytes
json_output: &AS_JSON
  treat_as: json
#../../tests_data/examples/
stdin_folder: &STDIN_FOLDER ../../tests_data/examples/stdin
stdout_folder: &STDOUT_FOLDER ../../tests_data/examples/stdout
stderr_folder: &STDERR_FOLDER ../../tests_data/examples/stderr
expected_stdout_folder: &EXPECTED_STDOUT_FOLDER ../../tests_data/examples/expected_stdout
expected_stderr_folder: &EXPECTED_STDERR_FOLDER ../../tests_data/examples/expected_stderr
#
tests:
#   # Pair of test to check for duplication in test names.
#   - test: "duplicate test names"
#     cwd: ./../../tests_data/examples/stdin/
#     binary_path: cat
#     skip: False
#     stdin:
#       file_path: [*STDIN_FOLDER, input_sanity_check.json]
#       treat_as: bytes
#     stdout:
#       treat_as: json
#     expected_stdout:
#       treat_as: json
#       file_path:  [*EXPECTED_STDOUT_FOLDER, expected_sanity_check.json]
#   - test: "duplicate test names"
#     cwd: ./../../tests_data/examples/stdin/
#     binary_path: cat
#     skip: False
#     stdin:
#       file_path: [*STDIN_FOLDER, input_sanity_check.json]
#       treat_as: bytes
#     stdout:
#       treat_as: json
#     expected_stdout:
#       treat_as: json
#       file_path:  [*EXPECTED_STDOUT_FOLDER, expected_sanity_check.json]
#   # Pair of test to check for duplication in test stdin file_path values.
#   - test: "stdin file_path duplicate test_1"
#     cwd: ./../../tests_data/examples/stdin/
#     binary_path: cat
#     skip: False
#     stdin:
#       file_path: [*STDIN_FOLDER, input_sanity_check.json]
#       treat_as: bytes
#     stdout:
#       treat_as: json
#     expected_stdout:
#       treat_as: json
#       file_path:  [*EXPECTED_STDOUT_FOLDER, expected_sanity_check.json]
#   - test: "stdin file_path duplicate test_2"
#     cwd: ./../../tests_data/examples/stdin/
#     binary_path: cat
#     skip: False
#     stdin:
#       file_path: [*STDIN_FOLDER, input_sanity_check.json]
#       treat_as: bytes
#     stdout:
#       treat_as: json
#     expected_stdout:
#       treat_as: json
#       file_path:  [*EXPECTED_STDOUT_FOLDER, expected_sanity_check.json]
#   # Pair of test to check for duplication in test expected_stdout file_path values.
#   - test: "expected_stdout file_path duplicate test_1"
#     cwd: ./../../tests_data/examples/stdin/
#     binary_path: cat
#     skip: False
#     stdin:
#       file_path: [*STDIN_FOLDER, input_sanity_check.json]
#       treat_as: bytes
#     stdout:
#       treat_as: json
#     expected_stdout:
#       treat_as: json
#       file_path:  [*EXPECTED_STDOUT_FOLDER, expected_sanity_check.json]
#   - test: "expected_stdout file_path duplicate test_2"
#     cwd: ./../../tests_data/examples/stdin/
#     binary_path: cat
#     skip: False
#     stdin:
#       file_path: [*STDIN_FOLDER, ignore_fields_actual.json]
#       treat_as: bytes
#     stdout:
#       treat_as: json
#     expected_stdout:
#       treat_as: json
#       file_path:  [*EXPECTED_STDOUT_FOLDER, expected_sanity_check.json]
#   # Pair of test to check for duplication in test stdout file_path values.
#   - test: "stdout file_path duplicate test_1"
#     cwd: ./../../tests_data/examples/stdin/
#     binary_path: cat
#     skip: False
#     stdin:
#       file_path: [*STDIN_FOLDER, input_sanity_check.json]
#       treat_as: bytes
#     stdout:
#       treat_as: json
#       file_path:  [*STDOUT_FOLDER, sanity_stdout.json]
#     expected_stdout:
#       treat_as: json
#       file_path:  [*EXPECTED_STDOUT_FOLDER, expected_sanity_check.json]
#   - test: "stdout file_path duplicate test_2"
#     cwd: ./../../tests_data/examples/stdin/
#     binary_path: cat
#     skip: False
#     stdin:
#       file_path: [*STDIN_FOLDER, ignore_fields_actual.json]
#       treat_as: bytes
#     stdout:
#       treat_as: json
#       file_path:  [*STDOUT_FOLDER, sanity_stdout.json]
#     expected_stdout:
#       treat_as: json
#       file_path:  [*EXPECTED_STDOUT_FOLDER, expected_sanity_check.json]
#   # Pair of test to check for duplication in test stderr file_path values.
#   - test: "stderr file_path duplicate test_1"
#     cwd: ./../../tests_data/examples/stdin/
#     binary_path: cat
#     skip: False
#     stdin:
#       file_path: [*STDIN_FOLDER, input_sanity_check.json]
#       treat_as: bytes
#     stderr:
#       treat_as: json
#       file_path:  [*STDERR_FOLDER, sanity_stderr.json]
#     expected_stdout:
#       treat_as: json
#       file_path:  [*EXPECTED_STDOUT_FOLDER, expected_sanity_check.json]
#   - test: "stdout file_path duplicate test_2"
#     cwd: ./../../tests_data/examples/stdin/
#     binary_path: cat
#     skip: False
#     stdin:
#       file_path: [*STDIN_FOLDER, ignore_fields_actual.json]
#       treat_as: bytes
#     stderr:
#       treat_as: json
#       file_path:  [*STDERR_FOLDER, sanity_stderr.json]
#     expected_stdout:
#       treat_as: json
#       file_path:  [*EXPECTED_STDOUT_FOLDER, expected_sanity_check.json]
#   # Pair of test to check for duplication in test expected_stderr file_path values.
#   - test: "expected_stderr file_path duplicate test_1"
#     cwd: ./../../tests_data/examples/stdin/
#     binary_path: cat
#     skip: False
#     stdin:
#       file_path: [*STDIN_FOLDER, input_sanity_check.json]
#       treat_as: bytes
#     expected_stderr:
#       treat_as: json
#       file_path:  [*EXPECTED_STDERR_FOLDER, sanity_expected_stderr.json]
#     expected_stdout:
#       treat_as: json
#       file_path:  [*EXPECTED_STDOUT_FOLDER, expected_sanity_check.json]
#   - test: "expected_stderr file_path duplicate test_2"
#     cwd: ./../../tests_data/examples/stdin/
#     binary_path: cat
#     skip: False
#     stdin:
#       file_path: [*STDIN_FOLDER, ignore_fields_actual.json]
#       treat_as: bytes
#     expected_stderr:
#       treat_as: json
#       file_path:  [*EXPECTED_STDERR_FOLDER, sanity_expected_stderr.json]
#     expected_stdout:
#       treat_as: json
#       file_path:  [*EXPECTED_STDOUT_FOLDER, ignore_fields_expected.json]
#   # Tests to check for stdout and expected_stdout content type mismatch.
  - test: "stdout and expected stdout same json 'treat_as' test_1"
    cwd: ./../../tests_data/examples/stdin/
    binary_path: cat
    skip: False
    stdin:
      file_path: [*STDIN_FOLDER, input_sanity_check.json]
      treat_as: bytes
    stdout:
      treat_as: json
      file_path:  [*STDOUT_FOLDER, sanity_expected_stderr.json]
    expected_stdout:
      treat_as: json
      file_path:  [*EXPECTED_STDOUT_FOLDER, expected_sanity_check.json]
#   - test: "stdout and expected stdout mismatch 'treat_as' test_2"
#     cwd: ./../../tests_data/examples/stdin/
#     binary_path: cat
#     skip: False
#     stdin:
#       file_path: [*STDIN_FOLDER, input_sanity_check.json]
#       treat_as: bytes
#     stdout:
#       treat_as: text
#       file_path:  [*STDOUT_FOLDER, sanity_expected_stderr.json]
#     expected_stdout:
#       treat_as: json
#       file_path:  [*EXPECTED_STDOUT_FOLDER, expected_sanity_check.json]
#   - test: "stderr and expected stderr mismatch 'treat_as' test_1"
#     cwd: ./../../tests_data/examples/stdin/
#     binary_path: cat
#     skip: False
#     arguments:
#       - no_file.json
#     stderr:
#       treat_as: json
#       file_path:  [*STDERR_FOLDER, sanity_stderr.json]
#     expected_stderr:
#       treat_as: text
#       content: "cat: can't open 'no_file.json': No such file or directory\n"
#     expected_stdout:
#       treat_as: text
#       content: ''
